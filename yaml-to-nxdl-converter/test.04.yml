#exemplifying how to use the translation for the following NXDL application definition
#https://github.com/nexusformat/definitions/blob/main/applications/NXmx.nxdl.xml
#in this example here the text for the doc has been stripped as it is not relevant for the functioning of the translation
#specify name and purpose of the application definition
#magic:
name: NXmx
type: nx_object #is equivalent to extends
#type: group 
doc: functional application definition for macromolecular crystallography
symbols:
  doc: These symbols
  np: Number of scan points
  i: Number of detector pixels in the slowest direction
  j: Number of detector pixels in the second slowest direction
  k: Number of detector pixels in the third slowest direction
  m: Number of channels in the incident beam spectrum, if known
  groupIndex: An array of the hierarchical levels of the parents of detector of detector elements or groupings of detector elements. A top-level element or grouping has parent level -1.
  nitems: Number of enumerated items

#draft the application definition
nx_entry: #alternatively entry
# type: nx_entry
# if isa is not specified, we assume isa NXobject
# if exists is not specified, we assume exists optional
  doc: Note, it is recommended that ``file_name`` and ``file_time`` are included as attributes at the root of a file that includes  :ref:`NXmx`. See :ref:`NXroot`.
  \@version: #when an entry should be an attribute mark it with a suffixed at character _a
#    exists: optional
    doc: test
    enumeration: [1]
  title:
#    type: nx_char we assume the default type of a field is nx_char, so you only need to specify type: if the nx type is different than nx_char
  start_time:
    type: nx_date_time
    doc: iso8601
#...skipping fields at the same nesting level as these bring no conceptual new learning experience
  end_time:
    type: nx_date_time
    doc: iso8601
  definition:
    enumeration: [1]
    doc: nxdl schema
  nx_data:
    data:
      type: nx_number
      doc: dim2 det
      dimensions: [[1, nP], [2, i], [3, j], [4, k, optional]] #optional is this equivalent to required="false"
  nx_sample:
    name:
#      type: nx_char
      doc: descriptive name sample
    depends_on:
#      type: nx_char
      doc: scan experiment
    nx_transformations:
      doc: sample goniometer
    temperature:
       type: nx_number
       units: nx_temperature
  nx_instrument:
    name:
#      type: nx_char
      doc: name of instrument
      \@short_name:
        doc: short name
    time_zone:
       type: nx_date_time
       doc: iso8601 time zone
       exists: recommended
    nx_detector_group:
      exists: recommended
      doc: optional logic det grouping
      group_names:
        doc: array of names
      group_index:
        type: nx_int
        doc: array of unique identifiers
        dimensions: [[1, i]]
      group_parent:
        type: nx_int
        doc: array hierarchy levels
        dimensions: [[1, groupIndex]]
     nx_detector:
        doc: normally detector group
        depends_on:
          doc: nexus path detector positioner
        nx_transformations:
          doc: localtion of axes
        nx_collection:
          doc: suggested container
        data:
          type: nx_number
          exists: recommended
          doc: for a dimension 2 detector
          dimensions: [[1, nP], [2, i], [3, j], [4, k, optional]]
          description:
            exists: recommended
            doc: manufacturer/model/etc
          time_per_channel:
            units: nx_time
             doc: time-of-flight
          nx_detector_module:
             doc: many detectors
             data_origin:
               type: nx_int
               doc: hyperslab data 0 based
             data_size:
               type: nx_int
               doc: two or three values for the size
             data_stride:
               type: nx_int
               doc: two or three values for the stride
             module_offset:
               units: nx_length
               type: nx_number
               doc: offset of the module
               \@transformation_type:
                 enumeration: [translation]
               \@vector:
	         type: nx_number
               \@offset:
                 type: nx_number
               \@depends_on:
             fast_pixel_direction:
               type: nx_number
               units: nx_length
               doc: values along the fastest varying direction
               \@transformation_type:
                 enumeration: [translation]
               \@vector:
	         type: nx_number
               \@offset:
                 type: nx_number
               \@depends_on:
             slow_pixel_direction:
               type: nx_number
               units: nx_length
               doc: values along the slowest varying direction
               \@transformation_type:
                 enumeration: [translation]
               \@vector:
	         type: nx_number
               \@offset:
                 type: nx_number
               \@depends_on:
              distance:
                exists: recommended
                type: nx_number
                units: nx_length
                doc: distance from the sample
              distance_derived:
                exists: recommended
                type: nx_boolean
                doc: boolean to indicate distance
              dead_time:
                type: nx_float
                units: nx_time
                doc: det dead time
              count_time:
                exists: recommended
                type: nx_float
                units: nx_time
                doc: det dead time
              beam_center_derived:
                type: nx_boolean
                doc: boolean to indicate distance derived
              beam_center_x:
                type: nx_float
                units: nx_length
                exists: recommended
                doc: this is x position
              beam_center_y:
                type: nx_float
                units: nx_length
                exists: recommended
                doc: this is y position
              angular_calibration_applied:
                type: nx_boolean
                doc: true when angular calibration
              angular_calibration:
                doc: calibration data
                dimensions: [[1, i], [2, j], [3, k, optional]] #is optional equivalent to required = false?
              flatfield_applied:
                type: nx_boolean
                doc: true when flat field
              flatfield:
                type: nx_number
                doc: flat field correction data
                dimensions: [[1, i], [2, j], [3, k, optional]]
#              flatfield_error: is deprecated
              pixel_mask_applied:
                type: nx_boolean
                doc: true when pixel mask
              pixel_mask:
                type: nx_int
                exists: recommended
                doc: the 32bit pixel mask
                dimensions: [[1, i], [2, j]]
              countrate_correction_applied:
                type: nx_boolean
                doc: true when count rate
              bit_depth_readout:
                type: nx_int
                exists: recommended
                doc: how many bits
              detector_readout_time:
                type: nx_float
                units: nx_time
                doc: time it takes to read out det
              frame_time:
                type: nx_float
                units: nx_time
                doc: time for each frame
              gain_setting:
                doc: gain settings of det
              saturation_value:
                type: nx_int
                doc: saturation
              underload_value:
                type: nx_int
                doc: lowest value
              sensor_material:
                doc: material
              sensor_thickness:
                type: nx_float
                units: nx_length
              threshold_energy:
                 type: nx_float
                 units: nx_energy
                 doc: photon counter
              type:
                 doc: descriptio of type such as scintillatior
     nx_beam:
       incident_wavelength:
          type: nx_float
          units: nx_wavelength
          doc: monochromatic beam wavelength
#       incident_wavelength_weight: deprecated
       incident_wavelength_weights:
         type: nx_float
         doc: array of length polychromatic beam
       incident_wavelength_spread:
         type: nx_float
         units: nx_wavelength
         doc: spread of wavelength
       incident_wavelength_spectrum:
         type: nx_data
         doc: spectrum
       flux:
         type: nx_float
         units: nx_flux
         doc: flux
       total_flux:
         type: nx_float
         units: nx_frequency
         doc: flux incident
       incident_beam_size:
         type: nx_float
         units: nx_length
         doc: two-element array
         exists: recommended
       profile:
         exists: recommended
         enumeration: [Gaussian, Airy, top-hat, rectangular]
       indicent_polarisation_stokes:
         dimensions: [[1, nP], [2, 4]]        
     nx_source:
       doc: neutron source
       name:
         doc: name of source
         \@short_name:
           doc: short name for source
# implementation to be continued and then applied to NXarpes
