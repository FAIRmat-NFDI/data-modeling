#pincelli at fhi-berlin.mpg.de, 11/2021
#a draft version of a NeXus application definition for arpes,
#the existing NXarpes is too restrictive, this application definition aims at generalizing it
#to be agnostic of the experimental details.
#the draft uses the application example of a simple 2D slice through the k-space, the elementary unit of
#arpes measurements.
#It uses only existing NeXus base classes. It is designed to be extended by other application definitions
# with higher granularity in the data description.

name: NXmpes_core
doc: This is the most general application definition for multidimensional ARPES.
symbols:
  doc: The symbols used in the schema to specify e.g. dimensions of arrays
  nfa: Number of fast axes (acquired simutaneously) e.g. emission angle, kinetic energy
  nsa: Number of slow axes (acquired scanning a physical quantity) e.g. lens voltage, photon energy or temperature
  nx: Number of points in the first angular direction
  ne: Number of points in the energy dispersion direction
category: application # Defaults "exists" to "required"
#draft the application definition
(NXentry):
  \@entry:
    doc: "NeXus convention is to use \"entry1\", \"entry2\", for analysis software to locate each entry."
  title:
    doc: "Title describing the entry."
  start_time(NX_DATE_TIME):
    doc: "ISO8601 formatted date time of the start of the measurement."
  definition:
    \@version: # New approach of NIAC: version controlled application definitions.
    doc: "Official NeXus NXDL schema to which this file conforms."
    enumeration: [NXmpes,NXmpes_core]
  (NXinstrument):
    (NXsource):
      type:
        doc: "Type of source. Any of these values:
        - Synchrotron X-ray Source
        - Rotating Anode X-ray
        - Fixed Tube X-ray
        - UV Laser
        - Free-Electron Laser
        - Optical Laser
        - UV Plasma Source
        - Metal Jet X-ray"
        enumeration: ["Synchrotron X-ray Source", "Rotating Anode X-ray", "Fixed Tube X-ray", "UV Laser", "Free-Electron Laser", "Optical Laser", "UV Plasma Source", "Metal Jet X-ray"]
      name:
        doc: "Free text name of the source."
      probe:
        doc: "Type of probe. In photoemission it's always photons, any of these values:
        - x-ray
        - ultraviolet
        - visible light"
        enumeration: ["x-ray","ultraviolet", "visible light"]
    (NXbeam): # Describes the beam at the sample.
      doc: "Properties of the beam at the sample."
      distance(NX_NUMBER):
        doc: "Distance of the point of evaluation of the beam from the sample."
        unit: NX_LENGTH
      incident_energy(NX_NUMBER):
        doc: "Incident photon energy."
        unit: NX_ENERGY
      incident_energy_spread(NX_NUMBER):
        exists: recommended
        doc: "FWHM energy linewidth of the incident photons."
        unit: NX_ENERGY
      incident_polarization(NX_NUMBER):
        exists: recommended
        doc: "Incident polarization specified as a Stokes vector."
        unit: NX_ANY # Should be NX_EFIELD_SQUARED (squared!)
        dimensions:
          rank: 1
          dim: [[1, 4]]
    (NXelectronanalyser):
      description:
        doc: "Free text description of the type of detector."
      energy_resolution(NX_NUMBER): # Ahead of base class
        doc: "Energy resolution of the analyser with the current setting."
        unit: NX_ENERGY
      momentum_resolution(NX_NUMBER): # Ahead of base class
        doc: "Momentum resolution of the analyser with the current setting."
        unit: NX_WAVENUMBER
      fast_axes:
        exists: optional
        doc: "List of the axes that are acquired symultaneously by the detector."
        dimensions:
          rank: 1
          dim: [[1,nfa]]
      slow_axes:
        exists: optional
        doc: "List of the axes that are acquired by scanning a physical parameter, listed in order of decreasing speed."
        dimensions:
          rank: 1
          dim: [[1,nsa]]
      # Examples: Fermi surface maps at every step of a temperature ramp.
      # With an hemispherical:
      # fast_axes: [energy,kx]
      # slow_axes: [ky,temperature]
      # With a tof:
      # fast_axes: [energy, kx, ky]
      # slow_axes: [temperature]
      # axes can be less abstract than this, i.e. [detector_x, detector_y] and [manipulator_angle, temperature]
      # If energy_scan_mode=sweep, fast_axes: [energy, kx]; slow_axes: [energy] should be allowed.
      (NXcollectioncolumn):
        scheme:
          doc: "Scheme of the electron collection column."
          enumeration: ["Standard", "Deflector", "PEEM", "Momentum Microscope"]
        mode:
          exists: recommended
          doc: "Labelling of the lens setting in use."
        projection:
          exists: recommended
          doc: "The space projected in the angularly dispersive directions, i.e. real or reciprocal."
          enumeration: ["real", "reciprocal"]
      (NXenergydispersion):
        scheme:
          doc: "Energy dispersion scheme employed."
          enumeration: ["tof", "hemispherical", "cylindrical mirror", "display mirror", "retarding grid"]
        pass_energy(NX_NUMBER):
          doc: "energy of the electrons on the mean path of the analyser."
          unit: NX_ENERGY
        energy_scan_mode:
          doc: "Way of scanning the energy axis (fixed or sweep)."
          enumeration: ["fixed","sweep"]
        (NXaperture): # Ahead of base class
          exists: recommended
          doc: "Aperture generating the momentum and/or energy filtering."
          description:
            doc: "Type of aperture inserted in the beam. One of the following:
            - slit
            - pinhole
            - iris"
            enumeration: ["slit","pinhole","iris"]
          shape:
            doc: "Description of the shape of the active part of the aperture, curved or straight for horizontal slits, square or round for pinhole etc."
            enumeration: ["curved", "straight", "circle", "square", "hexagon", "octagon", "bladed"]
          size(NX_NUMBER):
            doc: "The relevant dimension for the aperture (slit width, pinhole diameter etc)."
            unit: NX_LENGTH
      (NXdetector):
        amplifier_type:
          doc: "Type of electron amplifier."
          enumeration: ["MCP", "channeltron"] # channeltron might be used for some 1D applications such as spin detectors.
        detector_type:
          doc: "Description of the detector type."
          enumeration: ["DLD","Phosphor+CCD","Phosphor+CMOS","ECMOS"]
        sensor_pixels(NX_INT):
          exists: recommended
          doc: "Number of raw active element in each dimension. Important for swept scans."
          dimensions:
            rank: 1
            dim: [[1, 2]]
        (NXdata): # Raw signal without calibrated axes
          exists: recommended
          \@signal: raw # There is an object named raw that contains the signal
          raw(NX_NUMBER): # There is a block of numbers named raw.
            doc: "Raw data before calibration."
  (NXprocess):
      calculated_kx(NX_FLOAT):
        exists: recommended
        doc: "Calibrated kx momentum axis."
        unit: NX_WAVENUMBER
        dimensions:
          rank: 1
          dim: [[1, nx]]
      calculated_energy(NX_FLOAT):
        exists: recommended
        doc: "Calibrated energy axis."
        unit: NX_ENERGY
        dimensions:
          rank: 1
          dim: [[1, ne]]
      distortion_correction(NXdistortion):
        applied(NX_BOOLEAN):
          doc: "Has a distortion correction been applied?"
      image_registration(NXregistration):
        applied(NX_BOOLEAN):
          doc: "Has an image registration been applied?"
      energy_calibration(NXcalibration):
        applied(NX_BOOLEAN):
          doc: "Has an energy calibration been applied?"
      momentum_calibration(NXcalibration):
        exists: optional
        applied(NX_BOOLEAN):
          doc: "Has a momentum calibration been applied?"
  (NXsample):
    name:
      doc: "Simple and descriptive name of the sample."
    chemical_formula:
      doc: "Chemical formula of the sample."
    sample_history:
      exists: optional
      doc: "Ideally, a reference to the location or a unique identifier or other metadata file. In the case that is not available, free-text description."
    preparation_date(NX_DATE_TIME):
      exists: recommended
      doc: "ISO 8601 date of preparation of the sample for the ARPES experiment (i.e. cleaving, last annealing)."
      unit: NX_TIME
    description:
      doc: "Free-text surface preparation technique for the ARPES experiment, i.e. UHV cleaving, in-situ growth, sputtering/annealing etc."
    temperature(NX_NUMBER):
      doc: "Temperature of the sample"
      unit: NX_TEMPERATURE
    situation: ["vacuum"]
    pressure(NX_NUMBER):
      doc: "Residual gas pressure at the sample"
      unit: NX_PRESSURE
  (NXdata):
    \@signal: data # There is an object named data that contains the signal
    \@axes: ['energy','kpar']
    \@energy_indices: # There is an axis (to be specified) that represents energy
    \@kpar_indices: # There is an axis (to be specified) that represents the first parallel momentum direction
    data(NX_NUMBER): # There is a block of numbers named data.
      doc: "Processed plottable data."
    energy(NX_NUMBER):
      doc: "Data containing the energy axis"
    kpar(NX_NUMBER):
      doc: "Data containing the k parallel axis"
# NXdata structure is extremely free here to provide a low entry barrier for data parsing in the core appdef.
# Will be restricted further in extending appdefs.
# If there is no rebinning between raw data and plottable data, one can use links
# to link the data in NXinstrument:NXelectronanalyser:NXdetector:NXdata:Raw
# and the axes in NXprocess:calculated_kx and NXprocess:calculated_energy
