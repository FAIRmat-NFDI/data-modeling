#kuehbacm at hu-berlin.de, 11/2021
#a draft version of a NeXus application definition for electron microscopy
#the draft uses the application example of scanning nanobeam diffraction in a transmission electron microscope experiments
#but supplements the relevant metadata for this application example with more generalized components
#that could also be used e.g. as building blocks for a general/template for electron microscopy application application definitions
#which provide components of which most are by default optional but can be used when as fine granularity
#of the description is desired as to detail the technical components of the microscope (lenses, stigmators, detectors),
#and geometrical transformations which map coordinate systems of components to one another such that
#the application definition can be made so specific that it enables a digital setting up of the components for e.g.
#ray-tracing based simulation tools of the entire instrument
name: NXem_draft
category: contributed
doc: Draft set of components for a contributed class generic enough to describe electron microscopy experiments. #I would like to vote to discuss and compare to NXarpes from Tommaso and Laurenz and team and then go for rather an NXem_base and a set of derived application definitions which start from NXem_base, would this an avenue to go for Sandor?
symbols:
  doc: The symbols used in the schema to specify e.g. dimensions of arrays
  imageid: Frame or given number to distinguish different images in a stack
  ypos: Pixel coordinate in the slow-changing direction
  xpos: Pixel coordinate in the fast-changing direction
  nimages: Total of images in the imagestack
  ny: Pixel counts in the slow-changing direction
  nx: Pixel counts in the fast-changing direction
(NXentry):
  exists: required
  #if the exists keyword is not used the default is exists optional
  doc: Components (?? if not an application definition ??) for experiments with electron microscopes (scanning and transmission) electron microscopy
  definition:
    exists: required
    doc: Official NeXus NXDL schema to which this entry conforms.
    \@version:
      doc: Version specifier enabling to document modification of the schema.  
  experiment_identifier:
    exists: required
    doc: Unique identifier of the experiment, such as a (globally persistent) unique identifier. The identifier is usually defined by the facility or principle investigator. The identifier enables to link experiments to e.g. proposals.
  experiment_description:
  start_time(NX_DATE_TIME):
    exists: recommended
  end_time(NX_DATE_TIME):
    exists: recommended
  duration(NX_INT):
    unit: NX_TIME
  collection_time(NX_INT):
    unit: NX_TIME
  program_name:
    doc: Commercial or otherwise defined given name for the program which was used to generate the results file(s) with measured data and metadata. #This is the place where the microscope control software (suite) can go.
  program_version:
    doc: Either version with build number, commit hash, or description of a (online) repository where the source code of the program and build instructions can be found so that the program can be configured in such a way that result files can be created ideally in a deterministic manner.
    \@version:
      exists: recommended
      doc: Program version number. Either version with build number, commit hash, or description of a (online) repository where the source code of the program and build instructions can be found so that the program can be configured ideally such that the result file is recreatable in the same deterministic manner numerically.
  time_zone(NX_DATE_TIME):
    exists: required
    doc: ISO 8601 time_zone offset from UTC.
  #application_def(NXsubentry): #nx_subentry for now not supported
  operator(NXuser):
    exists: [min, 1, max, infty]
    doc: Contact information of at least the user of the instrument or the principal investigator who performed this experiment. Adding multiple users if relevant is recommended.
    name:
      exists: required
    affiliation:
      exists: recommended
      doc: Name of the affiliation of the user at the point in time when the experiment was performed.
    address:
      exists: recommended
    email:
      exists: required
    orcid:
      exists: recommended
    telephone_number:
      exists: recommended
  sample(NXsample): #in electron microscopy we probe both statistically representative, i.e. samples and less representative, specimens, in FAIRmat here we go for sample because if a sample is representative for a certain analysis task or not is not an inherent property of the sample but strongly application case- and research-question dependent
    exists: required
    name:
      exists: required
      doc: Descriptive name of sample
    sample_history:
      exists: required
      doc: Ideally, a reference to the location or a (globally persistent) unique identifier of e.g. another file, which is ideally formatted according to another NeXus application definition. This other file should document ideally as many details as possible of the material, its microstructure, and its thermo-chemo-mechanical processing/preparation history. In the case that such a detailed history of the sample/specimen is not available, use this field as a free-text description to specify a sub-set of the entire sample history, i.e. what you would consider being the key steps of the preparation.
    preparation_date(NX_DATE_TIME):
      exists: required
      doc: ISO8601 date and time when the specimen was prepared. This is especially required for environmentally sensitive samples such as hydrogen-charged specimens or tracer experiments with a short half-time.
    preparation_time_zone(NX_DATE_TIME):
      exists: required
      doc: ISO 8601 time_zone offset from UTC. Required, as it is possible that the specimen was prepared in a different place/laboratory than where the experiment is performed.
    short_title:
    atom_types:
      exists: required
      doc: "Use Hill's system for listing elements of the periodic table which are inside or attached to the surface of the specimen and thus relevant from a scientific point. This field can be used by materials database systems to parse the relevant elements without having to interpret these from the sample history."
  (NXmonitor):
  (NXdata):
    doc: Hard link to a location/locations in the hierarchy of the NeXus file where the data for default plotting are stored
    link1(link):
      target: tobedefined1
  #now we included components that one would use for instance in a specific application case, here scanning nanobeam diffraction
  scan_align(NXprocess):
    program_name:
      exists: required
      doc: Commercial or otherwise defined given name to the program that was used to process the data on-the-fly.
    program_version:
      exists: required
      doc: Either version with build number, commit hash, or description of a (online) repository where the source code of the program and build instructions can be found so that the program can be configured in such a way that result files can be created ideally in a deterministic manner.
    description:
      exists: required
      doc: Ideally, a reference to the location or a unique (globally persistent) identifier (e.g.) of e.g. another file which gives as many as possible details of this processing steps. In the case that such a detailed history of the processing (steps) is not available, use this field as a free-text description of this processing.
    misc(NXcollection):
      #the following three members are specific for an application definition which uses NXem_draft as a base but then adds NXprocesses with internal NXcollections which are specific for the application case/experiment type, such as scanning nanobeam diffraction, ptychography, EBSD, FIB milling etc.
      cartesian_scan_dimensions(NX_UINT):
        doc: to be defined
      cartesian_scan_dimension1_count(NX_UINT):
        doc: to be defined
      cartesian_scan_dimension2_count(NX_UINT):
        doc: to be defined
    acquired_data(NXdata):
      \@signal: imagestack
      \@axes: [imageid, ypos, xpos]
      \@imageid_indices: 2
      \@ypos_indices: 1
      \@xpos_indices: 0
      data(NX_FLOAT):
        dimensions:
          rank: 3
          dim: [[2, nimages], [1, ny], [0, nx]]
      imageid(NX_UINT):
        dimensions:
          rank: 1
          dim: [[2,nimages]]
        \@long_name:
          doc: Label for the image axis
      ypos(NX_NUMBER):
        dimensions:
          rank: 1
          dim: [[1,ny]]
        \@long_name:
          doc: Label for the y axis
      xpos(NX_NUMBER):
        dimensions:
          rank: 1
          dim: [[0,nx]]
        \@long_name:
          doc: Label for the x axis
      title:
      doc: A stack of two-dimensional images with imageid changing slowest, ypos changing faster, and xpos changing fastest, i.e. xpos + ypos * nx + imageid * nx*ny implicit C-style indexing.
    series_params(NXdata):
      doc: to be defined, series_params, A collection of parameter pairs for each image, i.e. 0 or 1 + imageid * 2 implicit indexing
      data(NX_NUMBER):
        dimensions:
          rank: 2
          dim: [[1, nimages], [0, 2]]
    aligned_positions(NXdata):
      doc: A collection of alignment position quintets for each image, i.e. 0, 1, ..., 4 + imageid * 5 implicit indexing
      data(NX_NUMBER):
      dimensions:
        rank: 2
        dim: [[1, nimages], [0, 5]]
  em_lab(NXinstrument):
    exists: required
    name:
      doc: Name of the microscope.
    #manufacturer_name and manufacturer_model, make consistent throughout the contributed classes for the components of an EM
    instrument_manufacturer:
      exists: required
      doc: Manufacturer of the entire instrument to enable e.g. queries in nomad about experiment for manufacturers. Usually more technical details are needed, which is why it is recommended to fill as many of the individual components of the instrument as required for interpreting the experiment.
    instrument_model:
      doc: Manufacturer brand/model to enable e.g. queries about microscope models. See comments on instrument_manufacturer on how to provide further specification.
    instrument_capability:
      doc: "Free-text list possibly multiple terms of functionalities which the instrument provides. The values are to be picked from a bag of controlled words. Examples are Feg, Astar, OmegaFilter."
    electron_gun(NXsource):
      exists: required
      doc: The source creating the electron beam.
      voltage(NX_FLOAT):
        exists: required
        doc: Voltage relevant to compute the energy of the electrons immediately after they left the gun.
        unit: NX_VOLTAGE
      probe:
        exists: required
        enumeration: [electron]
      wavelength(NX_FLOAT):
        unit: NX_WAVELENGTH
      emitter_type:
        exists: required
        doc: Emitter type used to create the beam. Choose one of the following thermionic, schottky, feg #do we need an extra option in the enum for cold FEGs ?
        enumeration: [thermionic, schottky, feg]
      description:
        doc: Ideally a reference to (another) file (ideally formatted using also an application definition) via a link, name, or a (globally persistent) unique identifier to give further details about the electron gun.
    gun_aperture(NXaperture):
    condenser_lens1(NXem_lens):
    condenser_lens2(NXem_lens):
    condenser_lens1_aperture(NXaperture):
    #how to implement the following scenario? I would like to add further fields for NXaperture but enable both condenser_lens1_aperture and condenser_lens2_aperture to have the same modified NXaperture classes? Do I need to copy in this case the example for condenser_lens2_aperture also into the above condenser_lens1_aperture ? The situation is not every lens has an associated aperture
    condenser_lens2_aperture(NXaperture):
      doc: An aperture (or diaphragm) for the electron beam.
      name:
      manufacturer_name:
        doc: Name of the manufacturer who built/constructed the aperture.
      manufacturer_model:
        doc: Hardware name/serial number or hash identifier given by the manufacturer to identify the aperture.
      description:
        doc: An (ideally globally persistent) unique identifier, link, or text which gives further details.
# the two next entries should be worked out in more details.
      type:
        exists: required
        doc: Qualitative description which type of aperture.
        enumeration: [circular]
      diameter(NX_FLOAT):
        exists: required
        doc: Relevant diameter in the case of circular aperture.
        unit: NX_LENGTH
      (NXtransformations):
        doc: Geometrical description where the aperture is mounted in the microscope column relative to the electron beam (path).
    cs_corrector(NXem_c3c5corr):
    prefield_or_mini_lens(NXem_lens):
    scanning_coils(NXem_deflector):
    specimen_stage(NXstage):
      #we could here use the components that are general for stages and (if needed) add further members to customize the stage specific for an application definition
    objective_lens(NXem_lens):
    objective_mini_lens(NXem_lens):
    selected_area_aperture(NXaperture):
    intermediate_lens1(NXem_lens):
    intermediate_lens2(NXem_lens):
    intermediate_lens3(NXem_lens):
    intermediate_lens4(NXem_lens):
    haadf_detector(NXdetector):
#   omega_filter(NXem_omegafilter):
      #an omega filter is an energy filter, a specific component of many (transmission) electron microscopes, this instrument is again an ensemble of beam bending and lenses so it should have an own application definition.
    energy_filter1_aperture(NXaperture):
    energy_filter1(NXfilter):
    projector_lens1(NXem_lens):
    projector_lens2(NXem_lens):
    projector_lens3(NXem_lens):
    projector_lens4(NXem_lens):
    fluorescent_screen_detector(NXdetector):
#    mirror1(NXem_mirror):
    ccd_camera1(NXdetector):
      doc: Description of the type of the detector e.g. CCD, scintillator, direct electron, image plate, CMOS
      manufacturer_name:
        exists: required
        doc: Name of the manufacturer who built/constructed the detector
      manufacturer_model:
        exists: required
        doc: Hardware name/serial number or hash identifier given by the manufacturer to identify the detector.
      sensor_material:
      bit_depth_readout(NX_INT):
      number_of_cycles(NX_INT):
      x_pixel_size(NX_FLOAT):
        unit: NX_LENGTH
      y_pixel_size(NX_FLOAT):
        unit: NX_LENGTH
      flatfield_applied(NX_BOOLEAN):
      flatfield(NX_FLOAT):
      exposure(NX_NUMBER):
        unit: NX_TIME
      description:
        doc: Free text option to write further details about the detector.
      (NXcollection):
        darkfield_applied(NX_BOOLEAN):
          doc: to be defined, what is the idea of the darkfield here, using the camera for dark field imaging mode or is this related to eigen noise of the detector without illumination
        darkfield(NX_FLOAT):
          doc: what is the idea of the darkfield here, using the camera for dark field imaging mode or is this related to inherent noise of the detector without illumination
        pixel_size_x(NX_FLOAT):
          unit: NX_PER_LENGTH
        pixel_size_y(NX_FLOAT):
          unit: NX_PER_LENGTH
        cartesian_scan_dimensions(NX_UINT):
          doc: NX_DIMENSIONLESS
        cartesian_scan_dimension1_count(NX_UINT):
        cartesian_scan_dimension2_count(NX_UINT):
        cartesian_scan_dimension3_count(NX_UINT):
        scan_properties(NXcollection): #we need to discuss if we allow NXcollections to be nested or rather have them laid out in a flat manner
          scan_system_name:
          x_points_step_width(NX_NUMBER):
            unit: NX_LENGTH
          y_points_step_width(NX_NUMBER):
            unit: NX_LENGTH
    dark_field_detector(NXdetector):
    bright_field_detector(NXdetector):
    ccd_camera2(NXdetector):
    eels_aperture(NXaperture):
    eels_detector(NXdetector):