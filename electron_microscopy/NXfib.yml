#kuehbacm at hu-berlin.de, 12/2021
#draft for a class which can describe all those components of an (electron) microscope which equips it with focused ion beam milling capabilities. FIB is a material preparation technique whereby the sample is milled with a focused ion beam to remove material. The technique enables site-specific preparation. One of the key application cases is in a scanning electron microscope / focused-ion beam instrument (SEM/FIB). The fact that a second gun and relevant control and focusing devices are needed warrants an own class.
#for more details about the relevant physics the following studies can be a start:
#https://link.springer.com/content/pdf/10.1557/s43578-020-00045-w.pdf
#https://www.sciencedirect.com/science/article/pii/S0168583X10001862
#https://www.osti.gov/servlets/purl/924801
category: base
doc: Class for describing focused-ion beam capabilities of an instrument. The class is designed to be used as an additional component of e.g. an electron microscope to describe sample/specimen preparation and the collecting of data and metadata for (scanning) electron microscope/focused-ion beam, (S)EM/FIB instruments.
#symbols:
#  doc: The symbols used in the schema to specify e.g. variables.
(NXfib):
  manufacturer_name:
    doc: Name of the manufacturer who built/constructed the focused-ion unit.
  manufacturer_model:
    doc: Hardware name, hash identifier, or serial number which e.g. the manufacturer uses. This field can also be used to specify where we can find further pieces of information for the focused-ion unit.
  ion_gun(NXsource):
      exists: required
      ion_source(NX_CHAR):
        exists: required
        doc: The source creating the ion beam
        enumeration: [liquid-metal, plasma, gas-field]
      ionized_speci(NX_CHAR):
        exists: required
        doc: Which ionized elements or molecule are ionized to form the beam that sputters material. Examples a gallium, helium, neon, argon, krypton, or xenon, O2+. #could use NXion
      brightness(NX_FLOAT):
        doc: to be defined
        unit: NX_ANY #e.g. A/cm*sr
      flux(NX_FLOAT):
        exists: recommended
        doc: Ion flux
        unit: NX_FLUX
      current(NX_FLOAT):
        doc: to be defined
        unit: NX_CURRENT
      voltage(NX_FLOAT):
        exists: recommended
        doc: Ion acceleration voltage upon source exit and entering the vacuum flight path.
        unit: NX_VOLTAGE
      ion_energy_profile(NX_NUMBER):
        doc: to be defined further
        unit: NX_ENERGY
      description:
        doc: Ideally a reference to (another) file (ideally formatted using also an application definition) via a link, name, or a (globally persistent) unique identifier to give further details about the ion gun.
      (NXtransformation):
        doc: A right-handed Cartesian coordinate system is used whose positive z-axis points in the direction of the ion beam, i.e. towards the sample. For modelling ion milling it is relevant to document the illumination vector. NXtransformations offers a place to store how the ion gun coordinate system has to be rotated to align its positive z-axis with the positive z-axis of e.g. the electron beam. Check NXem_draft and NXtransformations for further details.
    #once the ion beam is created we can probe the beam and document these probes with NXbeam
    #but we need electro-magnetic lenses to shape the ion beam and a scan box to sputter material in a controlled manner
  (NXlens_em):
    exists: [min, 1, max, infty]
  (NXaperture):
    exists: [min, 0, max, infty]
  #these components are controlled, usually with a instrument control software that is often part of e.g. the microscope software.
  scan_align(NXprocess):
    exists: required
    doc: No further detailed hardware/software which illuminates the sample
  milling_plan(NXprocess):
    exists: optional
    doc: Description of the program and sequence of sample positions sputtered.
    #in here we can store time-dependent quantities that give further details how the
#column pressure
#detailed lens and aperture setups can be modelled like for NXem using NXlens_em, NXaperture, NXdeflector
#charge compensation