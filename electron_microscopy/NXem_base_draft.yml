#kuehbacm at hu-berlin.de, 11/2021
#a draft version of a NeXus application definition for electron microscopy
#the draft uses the application example of scanning nanobeam diffraction in a transmission electron microscope experiments
#but supplements the relevant metadata for this application example with more generalized components
#that could also be used e.g. as building blocks for a general/template for electron microscopy application application definitions
#which provide components of which most are by default optional but can be used when as fine granularity
#of the description is desired as to detail the technical components of the microscope (lenses, stigmators, detectors),
#and geometrical transformations which map coordinate systems of components to one another such that
#the application definition can be made so specific that it enables a digital setting up of the components for e.g.
#ray-tracing based simulation tools of the entire instrument
name: NXem_base_draft
doc: draft set of components for application definitions for electron microscopy, here exemplified with scanning nanobeam diffraction in transmission electron microscopes in mind
symbols:
  doc: The symbols used in the schema to specify e.g. dimensions of arrays
  imageid: Frame or given number to distinguish different images in a stack
  ypos: Pixel coordinate in the slow-changing direction
  xpos: Pixel coordinate in the fast-changing direction
  nimages: Total of images in the imagestack
  ny: Pixel counts in the slow-changing direction
  nx: Pixel counts in the fast-changing direction
(NXentry):
  exists: required
  #if the exists keyword is not used the default is exists optional
  doc: to be defined
  experiment_identifier:
    exists: required
    doc: Unique identifier of the experiment, such as a (globally persistent) unique identifier. The identifier is usually defined by the facility or principle investigator. The identifier enables to link experiments to e.g. proposals.
  experiment_description:
    exists: required
  start_time(NX_DATE_TIME):
    exists: required
    unit:  NX_TIME
  end_time(NX_DATE_TIME):
    exists: recommended
    unit: NX_TIME
  duration(NX_INT):
    unit: NX_TIME
  collection_time(NX_INT):
    unit: NX_TIME
  program_name:
    doc: Commercial or otherwise defined given name to the program that was used to generate the results file(s) with measured data and metadata.
  program_version:
    doc: Either version with build number, commit hash, or description of a (online) repository where the source code of the program and build instructions can be found so that the program can be configured in such a way that result files can be created ideally in a deterministic manner.
  time_zone(NX_DATE_TIME):
    exists: required
    doc: ISO 8601 time_zone offset from UTC.
#  application_def___nx_subentry: #nx_subentry for now not supported
  definition_local:
    doc: FAIRmat-specific candidate proposal for an application definition exemplifying for scanning nanobeam diffraction.
    \@version:
        doc: Ideally version with build number are commit hash of the application definition. If not available a free-text description.
    \@url:
        doc: URL where to find further material (documentation, examples) relevant to the application definition
  operator(NXuser):
    exists: [min, 1, max, infty]
    doc: Contact information of at least the user of the instrument or the principal investigator who performed this experiment. Adding multiple users if relevant is recommended.
    name:
      exists: required
    affiliation:
      exists: recommended
      doc: Name of the affiliation of the user at the point in time when the experiment was performed.
    address:
      exists: recommended
    email:
      exists: required
    orcid:
      exists: recommended
    telephone_number:
      exists: recommended
  specimen(NXsample):
    exists: required
    name:
    sample_history:
      exists: required
      doc: Ideally, a reference to the location or a unique (globally persistent) identifier (e.g.) of e.g. another file which gives as many as possible details of the material, its microstructure, and its thermo-chemo-mechanical processing/preparation history. In the case that such a detailed history of the sample is not available, use this field as a free-text description to specify details of the sample and its preparation.
    preparation_date(NX_DATE_TIME):
      exists: required
      unit: NX_TIME
    preparation_time_zone(NX_DATE_TIME):
      exists: required
      doc: ISO 8601 time_zone offset from UTC.
      unit: NX_TIME
#    preparation_description:
#      doc: Ideally reference to another application definition that gives details for the preparation of the sample. If such an application definition is not available, use this field to give preparation details." },
    description:
      doc: Specimen/sample preparation and previous processing steps is the history which the sample carries when it is mounted in the electron microscope. Therefore, preparation details and other points of this history should be stored in sample_history. 
    short_title:
    temperature:
      doc: to be defined
      unit: NX_TEMPERATURE
    atom_types:
      exists: required
      doc: "Use Hill's system for listing elements of the periodic table which are inside or attached to the surface of the specimen and thus relevant from a scientific point. The purpose of this field is to allow materials database to parse the relevant elements without having to interpret the sample history."
  (NXmonitor):
  (NXdata):
    link:
    doc: Hard link to a location/locations in the hierarchy of the NeXus file where the data for default plotting are stored
  scan_align(NXprocess):
    program_name:
      exists: required
      doc: Commercial or otherwise defined given name to the program that was used to process the data on-the-fly.
    program_version:
      exists: required
      doc: Either version with build number, commit hash, or description of a (online) repository where the source code of the program and build instructions can be found so that the program can be configured in such a way that result files can be created ideally in a deterministic manner.
    description:
      exists: required
      doc: Ideally, a reference to the location or a unique (globally persistent) identifier (e.g.) of e.g. another file which gives as many as possible details of this processing steps. In the case that such a detailed history of the processing (steps) is not available, use this field as a free-text description of this processing.
    misc(NXcollection):
      cartesian_scan_dimensions(NX_UINT):
        doc: to be defined I need to double check with Christoph Koch what this is, but I think the member names for this and the next two members are not nice. I consider these three more like a dummy like the WONI experiment to understand how to store n-dimensional data using NeXus.
      cartesian_scan_dimension1_count(NX_UINT):
        doc: to be defined
      cartesian_scan_dimension2_count(NX_UINT):
        doc: to be defined
      acquired_data(NXdata):
        \@signal: imagestack
        \@axes: [imageid, ypos, xpos]
        \@imageid_indices: 2
        \@ypos_indices: 1
        \@xpos_indices: 0
        data(NX_FLOAT):
          dimensions:
            rank: 3
            dim: [[2, nimages], [1, ny], [0, nx]]
        imageid(NX_UINT):
          dimensions:
            rank: 1
            dim: [[2,nimages]]
          \@long_name:
            doc: Label for the image axis
        ypos(NX_NUMBER):
          dimensions:
            rank: 1
            dim: [[1,ny]]
          \@long_name:
            doc: Label for the y axis
        xpos(NX_NUMBER):
          dimensions:
            rank: 1
            dim: [[0,nx]]
          \@long_name:
            doc: Label for the x axis
        title:
        doc: A stack of two-dimensional images with imageid changing slowest, ypos changing faster, and xpos changing fastest, i.e. xpos + ypos * nx + imageid * nx*ny implicit C-style indexing.
      series_params(NXdata):
        doc: to be defined, series_params, A collection of parameter pairs for each image, i.e. 0 or 1 + imageid * 2 implicit indexing
        data(NX_NUMBER):
        dimensions:
          rank: 2
          dim: [[1, nimages], [0, 2]]
      aligned_positions(NXdata):
        doc: A collection of alignment position quintets for each image, i.e. 0, 1, ..., 4 + imageid * 5 implicit indexing
        data(NX_NUMBER):
        dimensions:
            rank: 2
            dim: [[1, nimages], [0, 5]]
  em_lab(NXinstrument):
    exists: required
    name:
      doc: Name of the microscope.
    instrument_manufacturer:
      exists: required
      doc: Manufacturer of the entire instrument to enable e.g. queries in nomad about experiment for manufacturers. Usually more technical details are needed, which is why it is recommended to fill as many of the individual components of the instrument as required for interpreting the experiment.
    instrument_model:
      doc: Manufacturer brand/model to enable e.g. queries about microscope models. See comments on instrument_manufacturer on how to provide further specification.
    instrument_capability:
      doc: "Free-text list possibly multiple terms of functionalities which the instrument provides. The values are to be picked from a bag of controlled words. Examples are Feg, Astar, OmegaFilter."
    electron_gun(NXsource):
      exists: required
      doc: The source creating the electron beam.
      voltage(NX_FLOAT):
        exists: required
        unit: nx_voltage
        doc: Voltage relevant to compute the energy of the electrons immediately after they left the gun.
      probe:
        exists: required
        enumeration: [electron]
      wavelength(NX_FLOAT):
        unit: NX_WAVELENGTH
        doc: to be discussed
      emitter_type:
        exists: required
        doc: Emitter type used to create the beam. Choose one of the following thermionic, schottky, feg, to we need an extra one for cold-feg.
        enumeration: [thermionic, schottky, feg]
      description:
        doc: Ideally a reference to (another) file (ideally formatted using also an application definition) via a link, name, or a (globally unique) persistent identifier to give further details about the electron gun.
    gun_aperture(NXaperture):
    condenser_lens1(NXem_lens):
    condenser_lens2(NXem_lens):
    condenser_lens1_aperture(NXaperture):
    condenser_lens2_aperture(NXaperture):
      doc: An aperture (to be discussed or diaphragm) for the electron beam.
      name:
      manufacturer_name:
        doc: Name of the manufacturer who built/constructed the aperture.
      manufacturer_model:
        doc: Hardware name/serial number or hash identifier given by the manufacturer to identify the aperture.
      description:
        doc: An (ideally globally unique) persistent identifier, link, or text which gives further details.
# the two next entries should be worked out in more details.
      type:
        exists: required
        doc: Qualitative description which type of aperture.
        enumeration: [circular]
      diameter(NX_FLOAT):
        exists: required
        unit: NX_LENGTH
        doc: Relevant diameter in the case of circular aperture.
      (NXtransformations):
        doc: Geometrical description where the aperture is mounted in the beam path.
    cs_corrector(NXem_cs_corr):
    prefield_or_mini_lens(NXem_lens):
    scanning_coils(NXem_deflector):
    specimen_stage(NXem_stage):
    objective_lens(NXem_lens):
    objective_mini_lens(NXem_lens):
    selected_area_aperture(NXaperture):
    intermediate_lens1(NXem_lens):
    intermediate_lens2(NXem_lens):
    intermediate_lens3(NXem_lens):
    intermediate_lens4(NXem_lens):
    haadf_detector(NXdetector):
#   omega_filter(NX_em_omegafilter):
    energy_filter1_aperture(NXaperture):
    energy_filter1(NXfilter):
    projector_lens1(NXem_lens):
    projector_lens2(NXem_lens):
    projector_lens3(NXem_lens):
    projector_lens4(NXem_lens):
    fluorescent_screen_detector(NXdetector):
#    mirror1(NXem_mirror):
    ccd_camera1(NXdetector):
      doc: Description of the type of the detector e.g. CCD, scintillator, direct electron, image plate, CMOS
      manufacturer_name:
        exists: required
        doc: Name of the manufacturer who built/constructed the detector
      manufacturer_model:
        exists: required
        doc: Hardware name/serial number or hash identifier given by the manufacturer to identify the detector.
      sensor_material:
      bit_depth_readout(NX_INT):
      number_of_cycles(NX_INT):
      x_pixel_size(NX_FLOAT):
        unit: NX_LENGTH
      y_pixel_size(NX_FLOAT):
        unit: NX_LENGTH
      flatfield_applied(NX_BOOLEAN):
      flatfield(NX_FLOAT):
      exposure(NX_NUMBER):
        unit: NX_TIME
      description:
        doc: Free text option to write further details about the detector.
      (NXcollection):
        darkfield_applied(NX_BOOLEAN):
          doc: to be defined, what is the idea of the darkfield here, using the camera for dark field imaging mode or is this related to eigen noise of the detector without illumination
        darkfield(NX_FLOAT):
          doc: what is the idea of the darkfield here, using the camera for dark field imaging mode or is this related to inherent noise of the detector without illumination
        pixel_size_x(NX_FLOAT):
          unit: nx_per_length
        pixel_size_y(NX_FLOAT):
          unit: nx_per_length
        cartesian_scan_dimensions(NX_UINT):
          doc: to be defined
        cartesian_scan_dimension1_count(NX_UINT):
          doc: to be defined
        cartesian_scan_dimension2_count(NX_UINT):
          doc: to be defined
        cartesian_scan_dimension3_count(NX_UINT):
          doc: to be defined
        scan_properties(NXcollection):
          scan_system_name:
            doc: to be defined
          x_points_step_width(NX_INT):
            doc: to be defined
          y_points_step_width(NX_INT):
            doc: to_be_defined
    dark_field_detector(NXdetector):
    bright_field_detector(NXdetector):
    ccd_camera2(NXdetector):
    eels_aperture(NXaperture):
    eels_detector(NXdetector):
